# Build Remote MCP with Authorization

**Author:** Danila Loginov  
**Published:** July 14, 2025  
**Reading Time:** 40 minutes

---

## Overview

2025년 6월 3일, Anthropic은 Claude의 Pro 플랜에서 "integrations" 기능을 사용할 수 있다고 발표했습니다. 이 통합 기능은 Anthropic이 2024년 11월에 오픈소스화한 원격 Model Context Protocol (MCP) 서버를 의미합니다.

이 글은 OAuth 2.1 인증을 지원하는 완전한 원격 MCP 서버를 구축하는 실용적인 가이드입니다. 공식 문서가 이론적인 부분을 다루고 있지만, 실제 구현에 대한 실용적인 가이드는 제한적입니다.

**GitHub Repository:** https://github.com/loginov-rocks/Remote-MCP-Auth

---

## Table of Contents

1. [Why This Matters](#why-this-matters)
   - 1.1. Problem
   - 1.2. What MCP Changes
   - 1.3. Commoditization Angle
   - 1.4. Local vs Remote
   - 1.5. Authorization Challenge
   - 1.6. Documentation Gap

2. [Solution Overview](#solution-overview)
   - 2.1. Component View
   - 2.2. Interaction Flow
   - 2.3. Technical Stack
   - 2.4. Battle School Computer

3. [Authorization Server](#authorization-server)
   - 3.1. User Experience
   - 3.2. Behind the Scenes
   - 3.3. Endpoints Summary
   - 3.4. Server Metadata Discovery Endpoint
   - 3.5. Dynamic Client Registration Endpoint
   - 3.6. Authorization Endpoint
   - 3.7. Authorization Processing Endpoint
   - 3.8. Token Endpoint
   - 3.9. Authenticated MCP Session Establishment

4. [MCP Server](#mcp-server)
   - 4.1. File Structure
   - 4.2. Router
   - 4.3. OAuth Controller
   - 4.4. MCP Auth Middleware
   - 4.5. MCP SSE Controller
   - 4.6. MCP Streamable Controller
   - 4.7. Services
   - 4.8. MCP Server
   - 4.9. Testing with MCP Inspector

5. [Deployment](#deployment)
   - 5.1. Authorization Server
   - 5.2. MCP Server

6. [Testing](#testing)

7. [Conclusion](#conclusion)

---

## 1. Why This Matters

MCP 프로토콜 자체는 잘 문서화되어 있지만, 원격 MCP 서버 지원이 AI 기반 애플리케이션 구축에 있어 왜 중요한 변화인지 설명하겠습니다.

### 1.1. Problem

MCP 이전에는 AI 벤더들이 모든 통합 기능을 직접 구축해야 했습니다.

- Google Workspace 통합이 필요하면? AI 회사에서 커넥터를 구축하고 유지보수해야 합니다
- Office 365? 또 다른 팀이 필요합니다
- 이런 식으로 계속됩니다

개발자로서 AI 애플리케이션을 구축할 때, RAG와 같은 기술을 사용하여 LLM을 데이터 소스와 직접 통합해야 했습니다. 이는 표준 연결성이어야 할 것을 위해 선택한 각 AI 모델마다 많은 커스텀 코드를 작성해야 함을 의미합니다.

### 1.2. What MCP Changes

MCP를 통해 진정한 관심사의 분리(separation of concerns)를 얻을 수 있습니다.

- AI 벤더는 추론과 오케스트레이션에 집중
- 서비스 제공자는 도메인 전문성에 집중

**실제적인 의미:**

하나의 MCP 서버를 구축하면 Claude, ChatGPT, 그리고 다음 달에 나올 모든 AI 어시스턴트와 즉시 작동합니다.

**주요 이점:**

- **확장성(Scalability):** 한 번 구축된 서비스가 어디서나 작동
- **상호운용성(Interoperability):** 사용자가 AI 어시스턴트와 서비스를 자유롭게 조합 가능
- **유지보수성(Maintainability):** 도메인 전문성이 적절한 곳에 유지됨
- **수정가능성(Modifiability):** 서비스가 AI 벤더의 릴리스 주기와 독립적으로 진화 가능
- **보안성(Security):** 각 서비스가 자체 인증 및 데이터 보호 모델 구현
- **테스트가능성(Testability):** 각 MCP 서비스를 독립적으로 테스트 가능

### 1.3. Commoditization Angle

LLM은 상품화되고 있습니다. 다양한 벤더의 모델들이 비슷한 추론 능력을 달성하고 있어, 경쟁 우위가 원시 모델 성능에서 데이터 접근 및 통합 능력으로 이동하고 있습니다.

이러한 세상에서 가치는 어떤 기반 모델을 사용하느냐가 아니라, AI 어시스턴트가 어떤 데이터에 접근할 수 있고 사용자를 대신하여 어떤 작업을 수행할 수 있는가에 있습니다.

### 1.4. Local vs Remote

로컬과 원격 MCP의 차이는 데스크톱에서 웹 애플리케이션으로의 전환을 연상시킵니다.

- **데스크톱 소프트웨어:** 설치, 구성, 유지보수 필요
- **웹 애플리케이션:** 이러한 마찰을 제거하고 보편적인 채택 달성

원격 MCP 서버는 동일한 변화를 제공합니다. 로컬 MCP 서버는 설치를 관리할 의향이 있는 개발자에게만 제한됩니다. 원격 MCP 서버는 이러한 마찰을 완전히 제거합니다.

### 1.5. Authorization Challenge

로컬 MCP 서버는 사용자 인증을 자동으로 상속합니다. 사용자의 머신에서 실행되며 사용자의 자격 증명으로 접근할 수 있는 모든 것에 접근합니다.

하지만 서버가 클라우드로 이동하면 이것이 불가능해집니다. 원격 MCP 서버는 근본적인 과제에 직면합니다:

- 사용자를 명시적으로 인증해야 함
- 개인 데이터에 안전하게 접근해야 함 (이메일, 문서, 캘린더, 저장소 등)

인증 없이 원격 MCP 서버는 공개 정보에만 접근할 수 있어 가치가 심각하게 제한됩니다. 인증은 원격 MCP를 데모용 장난감에서 사용자가 AI 어시스턴트에 개인 데이터를 안전하게 노출할 수 있는 엔터프라이즈급 플랫폼으로 변환합니다.

### 1.6. Documentation Gap

인증 프로토콜 이론은 문서화되어 있지만, 실제로 구현하는 방법은 즉시 명확하지 않습니다. Claude와 통합되는 작동하는 원격 MCP 서버를 구축하려고 할 때, 공식 TypeScript SDK 소스 코드를 파헤쳐야 했습니다.

이것이 바로 이 글이 다루는 내용입니다: Claude와 실제로 작동하는 처음부터 완전한 구현을 구축하는 것입니다.

---

## 2. Solution Overview

Claude와 작동하는 인증 기능이 있는 최소한이지만 완전한 원격 MCP 서버를 구축하는 과정을 안내하겠습니다.

### 2.1. Component View

AI 어시스턴트(Claude) 자체 외에도 두 가지 주요 구성 요소가 필요합니다:

1. **MCP Server**
2. **Authorization Server** (별도)

Authorization Server는 원격 MCP 솔루션을 위한 OAuth 흐름을 처리하는 단일 AWS Lambda로 구현됩니다.

**주요 설계 결정:**

- OAuth 흐름을 MCP 서버와 분리하여 다른 프로젝트에 이식 가능하도록 함
- SSE(Server-Sent Events)와 Streamable HTTP 전송 모두 구현
- Streamable HTTP가 SSE보다 구현 및 확장성 측면에서 우수함
- SSE는 현재 deprecated로 간주됨

### 2.2. Interaction Flow

사용자가 AI 어시스턴트(Claude)를 MCP 서버에 연결할 때의 전체 상호작용 흐름:

1. 사용자가 Claude에서 통합을 추가하고 "Connect" 클릭
2. Claude가 MCP 서버에 인증 엔드포인트 위치 확인 요청
3. MCP 서버가 별도의 Authorization 서버를 가리키는 메타데이터 반환
4. Claude가 사용자를 Authorization 서버가 렌더링하는 인증 페이지로 리디렉션
5. 사용자가 권한 부여
6. Authorization 서버가 인증 코드로 Claude에 다시 리디렉션
7. Claude가 Authorization 서버에서 액세스 토큰으로 코드 교환
8. Claude가 액세스 토큰을 사용하여 인증된 세션으로 MCP 서버에 연결
9. 이제 사용자가 Claude를 통해 MCP 도구와 상호작용 가능

### 2.3. Technical Stack

**Authorization Server:**
- Vanilla JavaScript (Node.js)
- AWS Lambda로 배포
- OAuth 2.1 프로토콜 구현

**MCP Server:**
- TypeScript
- Express.js
- 공식 TypeScript SDK (@modelcontextprotocol/sdk)
- SSE 및 Streamable HTTP 전송 지원

### 2.4. Battle School Computer

데모 애플리케이션인 "Battle School Computer"는 Ender's Game 시리즈에서 영감을 받았습니다. 인증된 사용자 데이터를 기반으로 개인화된 AI 응답을 보여줍니다.

**기능:**
- 사용자 인증
- 개인화된 응답 제공
- 전체 인증 흐름 데모

---

## 3. Authorization Server

Authorization Server는 OAuth 2.1 흐름을 처리하고 Claude가 사용자를 대신하여 MCP 서버에 접근할 수 있도록 허용하는 토큰을 발급합니다.

### 3.1. User Experience

사용자 관점에서의 인증 흐름:

1. Claude에서 "Connect" 버튼 클릭
2. Authorization 페이지로 리디렉션
3. 권한 검토 및 승인
4. Claude로 자동 리디렉션
5. 인증 완료

### 3.2. Behind the Scenes

백그라운드에서 일어나는 일:

1. **Server Metadata Discovery:** Claude가 인증 엔드포인트 위치 확인
2. **Dynamic Client Registration:** Claude가 클라이언트로 등록
3. **Authorization Request:** 사용자가 인증 페이지로 리디렉션
4. **User Consent:** 사용자가 권한 승인
5. **Token Exchange:** Claude가 인증 코드를 액세스 토큰으로 교환
6. **Authenticated Session:** MCP 서버에 대한 인증된 액세스

### 3.3. Endpoints Summary

Authorization Server가 구현하는 엔드포인트:

- **Server Metadata Discovery** (`/.well-known/oauth-authorization-server`)
- **Dynamic Client Registration** (`/register`)
- **Authorization** (`/authorize`)
- **Authorization Processing** (`/authorize/process`)
- **Token** (`/token`)

### 3.4-3.8. Endpoint Implementations

각 엔드포인트는 OAuth 2.1 사양에 따라 구현되며:

- 적절한 에러 처리
- 보안 검증
- 상태 관리
- 토큰 발급 및 검증

### 3.9. Authenticated MCP Session Establishment

인증된 세션이 설정되면:

- Claude가 Bearer 토큰으로 MCP 서버에 접근
- MCP 서버가 토큰 검증
- 사용자별 컨텍스트 제공
- 개인화된 도구 실행

---

## 4. MCP Server

MCP Server는 실제 도구를 제공하고 AI 어시스턴트와의 통신을 처리합니다.

### 4.1. File Structure

```
mcp-server/
├── src/
│   ├── controllers/
│   │   ├── oauth.controller.ts
│   │   ├── mcp-sse.controller.ts
│   │   └── mcp-streamable.controller.ts
│   ├── middleware/
│   │   └── mcp-auth.middleware.ts
│   ├── services/
│   │   └── mcp.service.ts
│   ├── router.ts
│   └── index.ts
└── package.json
```

### 4.2. Router

Express 라우터 설정:

- OAuth 엔드포인트 라우트
- SSE 전송 라우트
- Streamable HTTP 전송 라우트
- 인증 미들웨어 적용

### 4.3. OAuth Controller

OAuth 메타데이터 제공:

- Authorization Server 위치
- 지원되는 grant types
- 엔드포인트 URL

### 4.4. MCP Auth Middleware

모든 MCP 요청에 대한 인증 검증:

- Bearer 토큰 추출
- 토큰 검증
- 사용자 컨텍스트 첨부

### 4.5-4.6. Transport Controllers

**SSE Controller:**
- Server-Sent Events 연결 관리
- 실시간 메시지 스트리밍
- 연결 수명 주기 처리

**Streamable HTTP Controller:**
- HTTP 요청/응답 처리
- 더 나은 확장성
- 권장되는 접근 방식

### 4.7. Services

MCP 도구 및 프롬프트 구현:

- `get_student_info` 도구
- `instructor_message` 프롬프트
- 사용자별 데이터 처리

### 4.8. MCP Server

공식 SDK를 사용한 핵심 MCP 서버 구현:

- 도구 등록
- 프롬프트 등록
- 요청 처리
- 에러 처리

### 4.9. Testing with MCP Inspector

MCP Inspector를 사용한 로컬 테스트:

1. MCP Inspector 설치
2. 로컬 서버 실행
3. 연결 및 도구 테스트
4. 인증 흐름 검증

---

## 5. Deployment

### 5.1. Authorization Server

AWS Lambda에 배포:

```bash
# 종속성 설치
npm install

# Lambda 함수 패키징
zip -r function.zip .

# AWS CLI로 배포
aws lambda update-function-code \
  --function-name auth-server \
  --zip-file fileb://function.zip
```

### 5.2. MCP Server

선호하는 플랫폼에 배포:

- AWS ECS
- Google Cloud Run
- Azure Container Instances
- Heroku

**요구사항:**
- HTTPS 엔드포인트
- 환경 변수 구성
- Authorization Server URL

---

## 6. Testing

Claude와 통합 테스트:

1. Claude 설정에서 통합 추가
2. MCP 서버 URL 입력
3. 인증 흐름 완료
4. 도구 테스트

**확인사항:**
- 인증이 올바르게 작동하는지
- 도구가 예상대로 실행되는지
- 사용자별 데이터가 올바른지
- 에러가 적절히 처리되는지

---

## 7. Conclusion

이 가이드는 OAuth 2.1 인증을 지원하는 완전히 작동하는 원격 MCP 서버 구축 방법을 다룹니다.

**주요 학습 내용:**

- 원격 MCP가 AI 통합을 어떻게 변화시키는지
- OAuth 2.1 인증 흐름 구현
- SSE와 Streamable HTTP 전송 모두 지원
- Claude와의 실제 통합

**다음 단계:**

- 프로덕션 배포 고려사항 추가
- 더 많은 도구 및 기능 구현
- 보안 강화
- 성능 최적화

전체 작동하는 구현은 GitHub에서 확인할 수 있습니다:
https://github.com/loginov-rocks/Remote-MCP-Auth

---

## Additional Resources

### Related Articles

- **Calibrate 4-DOF Robot Arm (MeArm) for Inverse Kinematics (Part 2)**
- **How to make a web app for your own Bluetooth Low Energy device?**
- **Authorize Access to WebSocket API Gateway with Cognito**
- **Quick start with NodeMCU v3 (ESP8266), Arduino ecosystem and PlatformIO IDE**

### Recommended Reading

- Streamable HTTP MCP Server — Full Code Implementation
- Implement user authentication functionality in the MCP server
- Secure Your FastMCP Server: 3 Auth Patterns That Scale
- Securing MCP: From Vulnerable to Fortified
- Creating an MCP Server and Integrating with LangGraph
- Building a Simple Exchange Rate MCP Server using FastMCP

---

**Note:** This article contains detailed technical implementation that was truncated in the original file. For the complete code examples and implementation details, please refer to the GitHub repository.