[x] dcr 서버에서 bearer 재발급 시 Azure의 refresh 토큰 재발행 요청 제거
    - unified_http_server.py의 refresh_token grant 수정 완료
    - DCR Bearer 토큰 재발급 시 Azure 토큰 정보 완전히 독립
    - expires_in을 Azure에서 가져오지 않고 DCR 자체 설정(3600초) 사용
    - scope만 dcr_azure_tokens에서 조회 (Azure API 호출 없음)

    높음 – entrypoints/production/unified_http_server.py:793-801 & modules/dcr_oauth/dcr_service.py:561-571: Bearer 갱신 시 expires_in을 Azure access 토큰의 남은 수명에서 가져옵니다. Azure 토큰이 이미 만료된 상태에서 갱신하면 expires_in <= 0이 되어 새 Bearer 토큰이 즉시 만료됩니다. DCR 전용 TTL(예: 3600초)을 사용하도록 분리해야 합니다.
높음 – entrypoints/production/unified_http_server.py:759-790: 리프레시 플로우가 기존 DCR refresh 토큰을 재사용하면서 expires_at은 갱신하지 않습니다. 원래 30일이 지나면 토큰이 만료로 처리되어 더 이상 갱신할 수 없습니다. 성공 시 만료 시간을 연장하거나 새 refresh 토큰을 발급해야 합니다.
중간 – entrypoints/production/unified_http_server.py:808-816: 갱신 과정에서 Azure API 호출이 전혀 없어 Azure refresh 토큰이 갱신되지 않습니다. Microsoft refresh 토큰은 슬라이딩 윈도우 정책을 사용하므로 장기적으로 무효화될 가능성이 있습니다. 갱신 시점에 Azure 토큰 갱신을 수행하거나 백그라운드 작업으로 회전시키는 방안을 검토해야 합니다.

[ ] bearer_token의 만기 시간을 추적해서 관리 할 수 있도록 수정
[ ] teams
   - 시나리오 1 : 사용자 이름(영문)으로 메시지 전송 및 조회(최근 30개 정도 대화 내용)
   - 시나리오 2 : 최근 대화 사용자 조회(대상자 이름, 우선 순위 5개) - DB 에서 목록 관리
   - 시나리오 3 : 대화방에 대한 '키워드 검색', 전체 대화방에 대한 '키워드 검색 ' 50개씩 순차적으로 그리고 500개까지
   - 시나리오 4 : 사용자 이름이나 cht_id가 없는 경우 최근 대화한 사람의 chat_id 에서 조회/보내기
   * 제약 조건
        - 테이블을 이용하여 최근 대화한 상대의 최근 대화 시간 기록
        - chat_id 와 사용자 이름 매핑 테이블 관리
        - 채팅방 목록 조회 시 테이블 동기화
        - 테이블에서는 대화내용 관리 안함
        - 대화방 삭제된 경우 이력 관리(삭제된 대화방 표시)
        - 기존 도구를 사용하고 도구의 스키마를 변경하여 도구를 필요 이상으로 늘리지 않도록
